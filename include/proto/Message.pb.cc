// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_Message_2eproto() {
  delete TestRequestAB::default_instance_;
  delete TestResponseAB::default_instance_;
  delete TestRequestAC::default_instance_;
  delete TestResponseAC::default_instance_;
  delete TestRequestBA::default_instance_;
  delete TestResponseBA::default_instance_;
  delete TestRequestBC::default_instance_;
  delete TestResponseBC::default_instance_;
  delete TestRequestCA::default_instance_;
  delete TestResponseCA::default_instance_;
  delete TestRequestCB::default_instance_;
  delete TestResponseCB::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TestRequestAB::default_instance_ = new TestRequestAB();
  TestResponseAB::default_instance_ = new TestResponseAB();
  TestRequestAC::default_instance_ = new TestRequestAC();
  TestResponseAC::default_instance_ = new TestResponseAC();
  TestRequestBA::default_instance_ = new TestRequestBA();
  TestResponseBA::default_instance_ = new TestResponseBA();
  TestRequestBC::default_instance_ = new TestRequestBC();
  TestResponseBC::default_instance_ = new TestResponseBC();
  TestRequestCA::default_instance_ = new TestRequestCA();
  TestResponseCA::default_instance_ = new TestResponseCA();
  TestRequestCB::default_instance_ = new TestRequestCB();
  TestResponseCB::default_instance_ = new TestResponseCB();
  TestRequestAB::default_instance_->InitAsDefaultInstance();
  TestResponseAB::default_instance_->InitAsDefaultInstance();
  TestRequestAC::default_instance_->InitAsDefaultInstance();
  TestResponseAC::default_instance_->InitAsDefaultInstance();
  TestRequestBA::default_instance_->InitAsDefaultInstance();
  TestResponseBA::default_instance_->InitAsDefaultInstance();
  TestRequestBC::default_instance_->InitAsDefaultInstance();
  TestResponseBC::default_instance_->InitAsDefaultInstance();
  TestRequestCA::default_instance_->InitAsDefaultInstance();
  TestResponseCA::default_instance_->InitAsDefaultInstance();
  TestRequestCB::default_instance_->InitAsDefaultInstance();
  TestResponseCB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Message_2eproto_once_);
void protobuf_AddDesc_Message_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Message_2eproto_once_,
                 &protobuf_AddDesc_Message_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TestRequestAB::kIDFieldNumber;
const int TestRequestAB::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestRequestAB::TestRequestAB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestRequestAB::InitAsDefaultInstance() {
}

TestRequestAB::TestRequestAB(const TestRequestAB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestRequestAB::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequestAB::~TestRequestAB() {
  SharedDtor();
}

void TestRequestAB::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestRequestAB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestRequestAB& TestRequestAB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestRequestAB* TestRequestAB::default_instance_ = NULL;

TestRequestAB* TestRequestAB::New() const {
  return new TestRequestAB;
}

void TestRequestAB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestRequestAB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestRequestAB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestRequestAB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequestAB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestRequestAB*>(&from));
}

void TestRequestAB::MergeFrom(const TestRequestAB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestRequestAB::CopyFrom(const TestRequestAB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequestAB::IsInitialized() const {

  return true;
}

void TestRequestAB::Swap(TestRequestAB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestRequestAB::GetTypeName() const {
  return "TestRequestAB";
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponseAB::kIDFieldNumber;
const int TestResponseAB::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestResponseAB::TestResponseAB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestResponseAB::InitAsDefaultInstance() {
}

TestResponseAB::TestResponseAB(const TestResponseAB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponseAB::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponseAB::~TestResponseAB() {
  SharedDtor();
}

void TestResponseAB::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestResponseAB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestResponseAB& TestResponseAB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestResponseAB* TestResponseAB::default_instance_ = NULL;

TestResponseAB* TestResponseAB::New() const {
  return new TestResponseAB;
}

void TestResponseAB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestResponseAB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponseAB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestResponseAB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponseAB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestResponseAB*>(&from));
}

void TestResponseAB::MergeFrom(const TestResponseAB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestResponseAB::CopyFrom(const TestResponseAB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponseAB::IsInitialized() const {

  return true;
}

void TestResponseAB::Swap(TestResponseAB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestResponseAB::GetTypeName() const {
  return "TestResponseAB";
}


// ===================================================================

#ifndef _MSC_VER
const int TestRequestAC::kIDFieldNumber;
const int TestRequestAC::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestRequestAC::TestRequestAC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestRequestAC::InitAsDefaultInstance() {
}

TestRequestAC::TestRequestAC(const TestRequestAC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestRequestAC::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequestAC::~TestRequestAC() {
  SharedDtor();
}

void TestRequestAC::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestRequestAC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestRequestAC& TestRequestAC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestRequestAC* TestRequestAC::default_instance_ = NULL;

TestRequestAC* TestRequestAC::New() const {
  return new TestRequestAC;
}

void TestRequestAC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestRequestAC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestRequestAC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestRequestAC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequestAC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestRequestAC*>(&from));
}

void TestRequestAC::MergeFrom(const TestRequestAC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestRequestAC::CopyFrom(const TestRequestAC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequestAC::IsInitialized() const {

  return true;
}

void TestRequestAC::Swap(TestRequestAC* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestRequestAC::GetTypeName() const {
  return "TestRequestAC";
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponseAC::kIDFieldNumber;
const int TestResponseAC::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestResponseAC::TestResponseAC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestResponseAC::InitAsDefaultInstance() {
}

TestResponseAC::TestResponseAC(const TestResponseAC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponseAC::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponseAC::~TestResponseAC() {
  SharedDtor();
}

void TestResponseAC::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestResponseAC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestResponseAC& TestResponseAC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestResponseAC* TestResponseAC::default_instance_ = NULL;

TestResponseAC* TestResponseAC::New() const {
  return new TestResponseAC;
}

void TestResponseAC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestResponseAC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponseAC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestResponseAC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponseAC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestResponseAC*>(&from));
}

void TestResponseAC::MergeFrom(const TestResponseAC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestResponseAC::CopyFrom(const TestResponseAC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponseAC::IsInitialized() const {

  return true;
}

void TestResponseAC::Swap(TestResponseAC* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestResponseAC::GetTypeName() const {
  return "TestResponseAC";
}


// ===================================================================

#ifndef _MSC_VER
const int TestRequestBA::kIDFieldNumber;
const int TestRequestBA::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestRequestBA::TestRequestBA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestRequestBA::InitAsDefaultInstance() {
}

TestRequestBA::TestRequestBA(const TestRequestBA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestRequestBA::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequestBA::~TestRequestBA() {
  SharedDtor();
}

void TestRequestBA::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestRequestBA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestRequestBA& TestRequestBA::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestRequestBA* TestRequestBA::default_instance_ = NULL;

TestRequestBA* TestRequestBA::New() const {
  return new TestRequestBA;
}

void TestRequestBA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestRequestBA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestRequestBA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestRequestBA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequestBA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestRequestBA*>(&from));
}

void TestRequestBA::MergeFrom(const TestRequestBA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestRequestBA::CopyFrom(const TestRequestBA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequestBA::IsInitialized() const {

  return true;
}

void TestRequestBA::Swap(TestRequestBA* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestRequestBA::GetTypeName() const {
  return "TestRequestBA";
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponseBA::kIDFieldNumber;
const int TestResponseBA::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestResponseBA::TestResponseBA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestResponseBA::InitAsDefaultInstance() {
}

TestResponseBA::TestResponseBA(const TestResponseBA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponseBA::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponseBA::~TestResponseBA() {
  SharedDtor();
}

void TestResponseBA::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestResponseBA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestResponseBA& TestResponseBA::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestResponseBA* TestResponseBA::default_instance_ = NULL;

TestResponseBA* TestResponseBA::New() const {
  return new TestResponseBA;
}

void TestResponseBA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestResponseBA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponseBA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestResponseBA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponseBA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestResponseBA*>(&from));
}

void TestResponseBA::MergeFrom(const TestResponseBA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestResponseBA::CopyFrom(const TestResponseBA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponseBA::IsInitialized() const {

  return true;
}

void TestResponseBA::Swap(TestResponseBA* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestResponseBA::GetTypeName() const {
  return "TestResponseBA";
}


// ===================================================================

#ifndef _MSC_VER
const int TestRequestBC::kIDFieldNumber;
const int TestRequestBC::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestRequestBC::TestRequestBC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestRequestBC::InitAsDefaultInstance() {
}

TestRequestBC::TestRequestBC(const TestRequestBC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestRequestBC::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequestBC::~TestRequestBC() {
  SharedDtor();
}

void TestRequestBC::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestRequestBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestRequestBC& TestRequestBC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestRequestBC* TestRequestBC::default_instance_ = NULL;

TestRequestBC* TestRequestBC::New() const {
  return new TestRequestBC;
}

void TestRequestBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestRequestBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestRequestBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestRequestBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequestBC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestRequestBC*>(&from));
}

void TestRequestBC::MergeFrom(const TestRequestBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestRequestBC::CopyFrom(const TestRequestBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequestBC::IsInitialized() const {

  return true;
}

void TestRequestBC::Swap(TestRequestBC* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestRequestBC::GetTypeName() const {
  return "TestRequestBC";
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponseBC::kIDFieldNumber;
const int TestResponseBC::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestResponseBC::TestResponseBC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestResponseBC::InitAsDefaultInstance() {
}

TestResponseBC::TestResponseBC(const TestResponseBC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponseBC::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponseBC::~TestResponseBC() {
  SharedDtor();
}

void TestResponseBC::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestResponseBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestResponseBC& TestResponseBC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestResponseBC* TestResponseBC::default_instance_ = NULL;

TestResponseBC* TestResponseBC::New() const {
  return new TestResponseBC;
}

void TestResponseBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestResponseBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponseBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestResponseBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponseBC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestResponseBC*>(&from));
}

void TestResponseBC::MergeFrom(const TestResponseBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestResponseBC::CopyFrom(const TestResponseBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponseBC::IsInitialized() const {

  return true;
}

void TestResponseBC::Swap(TestResponseBC* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestResponseBC::GetTypeName() const {
  return "TestResponseBC";
}


// ===================================================================

#ifndef _MSC_VER
const int TestRequestCA::kIDFieldNumber;
const int TestRequestCA::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestRequestCA::TestRequestCA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestRequestCA::InitAsDefaultInstance() {
}

TestRequestCA::TestRequestCA(const TestRequestCA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestRequestCA::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequestCA::~TestRequestCA() {
  SharedDtor();
}

void TestRequestCA::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestRequestCA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestRequestCA& TestRequestCA::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestRequestCA* TestRequestCA::default_instance_ = NULL;

TestRequestCA* TestRequestCA::New() const {
  return new TestRequestCA;
}

void TestRequestCA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestRequestCA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestRequestCA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestRequestCA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequestCA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestRequestCA*>(&from));
}

void TestRequestCA::MergeFrom(const TestRequestCA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestRequestCA::CopyFrom(const TestRequestCA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequestCA::IsInitialized() const {

  return true;
}

void TestRequestCA::Swap(TestRequestCA* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestRequestCA::GetTypeName() const {
  return "TestRequestCA";
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponseCA::kIDFieldNumber;
const int TestResponseCA::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestResponseCA::TestResponseCA()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestResponseCA::InitAsDefaultInstance() {
}

TestResponseCA::TestResponseCA(const TestResponseCA& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponseCA::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponseCA::~TestResponseCA() {
  SharedDtor();
}

void TestResponseCA::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestResponseCA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestResponseCA& TestResponseCA::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestResponseCA* TestResponseCA::default_instance_ = NULL;

TestResponseCA* TestResponseCA::New() const {
  return new TestResponseCA;
}

void TestResponseCA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestResponseCA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponseCA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestResponseCA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponseCA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestResponseCA*>(&from));
}

void TestResponseCA::MergeFrom(const TestResponseCA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestResponseCA::CopyFrom(const TestResponseCA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponseCA::IsInitialized() const {

  return true;
}

void TestResponseCA::Swap(TestResponseCA* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestResponseCA::GetTypeName() const {
  return "TestResponseCA";
}


// ===================================================================

#ifndef _MSC_VER
const int TestRequestCB::kIDFieldNumber;
const int TestRequestCB::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestRequestCB::TestRequestCB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestRequestCB::InitAsDefaultInstance() {
}

TestRequestCB::TestRequestCB(const TestRequestCB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestRequestCB::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequestCB::~TestRequestCB() {
  SharedDtor();
}

void TestRequestCB::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestRequestCB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestRequestCB& TestRequestCB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestRequestCB* TestRequestCB::default_instance_ = NULL;

TestRequestCB* TestRequestCB::New() const {
  return new TestRequestCB;
}

void TestRequestCB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestRequestCB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestRequestCB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestRequestCB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequestCB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestRequestCB*>(&from));
}

void TestRequestCB::MergeFrom(const TestRequestCB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestRequestCB::CopyFrom(const TestRequestCB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequestCB::IsInitialized() const {

  return true;
}

void TestRequestCB::Swap(TestRequestCB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestRequestCB::GetTypeName() const {
  return "TestRequestCB";
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponseCB::kIDFieldNumber;
const int TestResponseCB::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

TestResponseCB::TestResponseCB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestResponseCB::InitAsDefaultInstance() {
}

TestResponseCB::TestResponseCB(const TestResponseCB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestResponseCB::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponseCB::~TestResponseCB() {
  SharedDtor();
}

void TestResponseCB::SharedDtor() {
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TestResponseCB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestResponseCB& TestResponseCB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
#endif
  return *default_instance_;
}

TestResponseCB* TestResponseCB::default_instance_ = NULL;

TestResponseCB* TestResponseCB::New() const {
  return new TestResponseCB;
}

void TestResponseCB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestResponseCB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestResponseCB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string debug_info = 2;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug_info(), output);
  }

}

int TestResponseCB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string debug_info = 2;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponseCB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestResponseCB*>(&from));
}

void TestResponseCB::MergeFrom(const TestResponseCB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
}

void TestResponseCB::CopyFrom(const TestResponseCB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponseCB::IsInitialized() const {

  return true;
}

void TestResponseCB::Swap(TestResponseCB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestResponseCB::GetTypeName() const {
  return "TestResponseCB";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
